#!/usr/bin/env bash

# This file is part of Goatee.
#
# Copyright 2014 Bryan Gardiner
#
# Goatee is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Goatee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Goatee.  If not, see <http://www.gnu.org/licenses/>.

# This script returns 0 on success, 1 on warnings (committable), and 2
# on errors (a commit should fail).

set -u

projectDir="$(dirname "$(realpath "$(git rev-parse --git-dir)")")"
srcDirs="$*"
warningsFound=0

echo "HLint:"
echo
cppFileArg=
if [[ -e dist/build/autogen/cabal_macros.h ]]; then
    cppFileArg=--cpp-file=dist/build/autogen/cabal_macros.h
fi
if [[ -z $srcDirs ]]; then
    srcDirs="$projectDir"
fi
if [[ -n "$(find $srcDirs -name '*.hs' -print -quit)" ]]; then
    hlint $cppFileArg $srcDirs
else
    echo "Skipped, no .hs files found."
fi
hlintResult=$?

if git --no-pager grep -q '\s\+$' $srcDirs; then
    echo
    echo "Trailing whitespace found:"
    echo
    git --no-pager grep -n --no-color '\s\+$'
    whitespaceResult=1
else
    whitespaceResult=0
fi

tabsResult=0
# Tabs are not allowed anywhere in Haskell files.
hsFiles="$(find $srcDirs -type f -name '*.hs')"
if [[ -n "$hsFiles" ]] && git --no-pager grep -q '	' $hsFiles; then
    if test $tabsResult -eq 0; then
        echo
        echo "Tabs found:"
        echo
        tabsResult=1
    fi
    git --no-pager grep -n --no-color '	' $hsFiles
fi
# Tabs shouldn't be used for leading whitespace anywhere.
if git --no-pager grep -q '^	' $srcDirs; then
    if test $tabsResult -eq 0; then
        echo
        echo "Leading tabs found:"
        echo
        tabsResult=1
    fi
    git --no-pager grep -n --no-color '^	' $srcDirs
fi

if git --no-pager grep -q '.\{101\}' $srcDirs; then
    echo
    echo ">100-char lines found:"
    echo
    git --no-pager grep -n --no-color '.\{101\}' $srcDirs
    longLinesResult=1
else
    longLinesResult=0
fi

# Check that all files contain copyright and license notices.
legalResult=0
while read file; do
    # Only check tracked files.
    if git ls-files --error-unmatch "$file" >/dev/null 2>&1; then
        case "$file" in
            *README)
                grep -iq copyright "$file";;
            *.cabal)
                grep -q '^copyright:' "$file" && grep -q '^license: AGPL-3$' "$file";;
            *)
                head -5 "$file" | grep -q Copyright \
                    && head -20 "$file" | grep -q 'Affero General Public License';;
        esac
        if [[ $? -ne 0 ]]; then
            if test $legalResult -eq 0; then
                echo
                echo "Missing or bad copyright/license notices for files:"
                echo
                legalResult=1
            fi
            echo "$file"
        fi
    fi
done < <(find $srcDirs -type f)
# TODO ^ Rewrite this process substitution in a POSIX-friendly manner.

# If in a Cabal package, then check that all tracked files are listed in Cabal
# file.
if ! ls *.cabal >/dev/null 2>&1; then
    sdistResult=0
elif cabal help sdist |& grep -qe --list-sources; then
    sdistResult=1
    set -e
    sdistDir="$(mktemp -d)"
    set +e
    cabal sdist --list-sources="$sdistDir/sdist-files-raw" >/dev/null
    if ! test -r "$sdistDir/sdist-files-raw"; then
        echo "Failed to list source distribution files."
    else
        sed 's!^\./!!' <"$sdistDir/sdist-files-raw" | sort | uniq >"$sdistDir/sdist-files"
        git ls-files | sort >"$sdistDir/tracked-files"
        if ! cmp "$sdistDir/tracked-files" "$sdistDir/sdist-files" >/dev/null; then
            echo
            echo "Some files are missing from the source distribution."
            echo "Please add them to the Cabal file."
            echo "Diff between expected (tracked) files and actual files:"
            echo
            diff -u "$sdistDir/tracked-files" "$sdistDir/sdist-files"
        else
            sdistResult=0
        fi
    fi
    rm -rf "$sdistDir"
else
    echo
    echo "Warning: cabal-install is too old for sdist to support --list-sources."
    echo "         Skipping check for files missing from goatee.cabal.  If you're adding"
    echo "         or removing files, please ensure that goatee.cabal is up to date."
    warningsFound=1
    sdistResult=0
fi

if test $hlintResult -ne 0 \
    -o $whitespaceResult -ne 0 \
    -o $tabsResult -ne 0 \
    -o $longLinesResult -ne 0 \
    -o $legalResult -ne 0 \
    -o $sdistResult -ne 0; then
    exit 2
elif test $warningsFound -ne 0; then
    exit 1
else
    exit 0
fi
