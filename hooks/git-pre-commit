#!/bin/sh

# This file is part of Goatee.
#
# Copyright 2014 Bryan Gardiner
#
# Goatee is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Goatee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Goatee.  If not, see <http://www.gnu.org/licenses/>.

set -e
precommitBuildOpts="-Werror"
scriptsDir="$(realpath "$(dirname "$0")")"
unstagedDiff="$(mktemp)"

die() {
    if test ${1:-1} -ne 0; then
        echo "Precommit: Encountered errors, exiting ($1)."
    fi
    set -e
    # git apply doesn't like when its input is empty, so don't call it
    # if that's the case.
    (if test -s "$unstagedDiff"
        then git apply --whitespace=nowarn <"$unstagedDiff"
        else :
	fi) && \
            git stash drop --quiet && \
            rm "$unstagedDiff"
    exit "${1:-1}"
}

cd "$(dirname "$(git rev-parse --git-dir)")"
set +e
source ./cabal.sh

echo "Precommit: Stashing unstaged changes in $unstagedDiff."
set -e
git diff --full-index --binary >"$unstagedDiff"
git stash save --keep-index --quiet "Goatee presubmit stash ($(date))."
set +e

echo "Precommit: Linting."
lintLog="$(mktemp)"
hooks/lint src >>"$lintLog" 2>&1
result="$?"
if test "$result" -ne 0; then
    echo
    cat "$lintLog"
    rm "$lintLog"
    echo
    echo "Precommit: Lint detected, please clean."
    die "$result"
fi
rm "$lintLog"
# Also check for any new trailing whitespace.
if git diff --cached | grep -q '^+.*[[:space:]]$'; then
    echo "Precommit: Trailing whitespace detected, please remove."
    die 1
fi

echo "Precommit: Checking that the package builds."
buildLog="$(mktemp)"
"$CABAL" configure --enable-tests >>"$buildLog" 2>&1
"$CABAL" build --ghc-options="$precommitBuildOpts" >>"$buildLog" 2>&1
result="$?"
if test "$result" -ne 0; then
    echo
    cat "$buildLog"
    rm "$buildLog"
    echo
    echo "Precommit: Failed to build, please fix."
    die "$result"
fi
rm "$buildLog"

echo "Precommit: Running tests."
testLog="$(mktemp)"
./test.sh >>"$testLog" 2>&1
result="$?"
if test "$result" -ne 0; then
    echo
    cat "$testLog"
    rm "$testLog"
    echo
    echo "Precommit: Tests failed, please fix."
    die "$result"
fi
rm "$testLog"

echo "Precommit: Success."
die 0
