#!/bin/sh

set -e

unstagedDiff="$(mktemp)"

die() {
    if test ${1:-1} -ne 0; then
        echo "Precommit: Encountered errors, exiting ($1)."
    fi
    echo "Precommit: Applying stashed changes."
    set -e
    # git apply doesn't like when its input is empty, so don't call it
    # if that's the case.
    (if test -s "$unstagedDiff"
        then git apply --whitespace=nowarn <"$unstagedDiff"
        else :
	fi) && \
            git stash drop --quiet && \
            rm "$unstagedDiff"
    exit "${1:-1}"
}

cd "$(dirname "$(git rev-parse --git-dir)")"
echo "Precommit: Stashing unstaged changes in $unstagedDiff."
git diff --full-index --binary >"$unstagedDiff"
git stash save --keep-index --quiet "GoHS presubmit stash ($(date))."

set +e

echo "Precommit: Linting."
lintLog="$(mktemp)"
hlint src >>"$lintLog" 2>&1
result="$?"
if test "$result" -ne 0; then
    echo
    cat "$lintLog"
    rm "$lintLog"
    echo
    echo "Precommit: Lint detected, please clean."
    die "$result"
fi
rm "$lintLog"

echo "Precommit: Checking that the package builds."
buildLog="$(mktemp)"
cabal configure >>"$buildLog" 2>&1
cabal build >>"$buildLog" 2>&1
result="$?"
if test "$result" -ne 0; then
    echo
    cat "$buildLog"
    rm "$buildLog"
    echo
    echo "Precommit: Failed to build, please fix."
    die "$result"
fi
rm "$buildLog"

echo "Precommit: Running tests."
testLog="$(mktemp)"
./test.sh >>"$testLog" 2>&1
result="$?"
if test "$result" -ne 0; then
    echo
    cat "$testLog"
    rm "$testLog"
    echo
    echo "Precommit: Tests failed, please fix."
    die "$result"
fi
rm "$testLog"

echo "Precommit: Success."
die 0
